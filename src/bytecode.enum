/*        op        name        operands    stack         */
ENUM_ITEM(NOP, "nop", 0, 0) \
/* load int const */ \
ENUM_ITEM(LD_I4_M1, "ld.i4.m1", 0, 1) \
ENUM_ITEM(LD_I4_0, "ld.i4.0", 0, 1) \
ENUM_ITEM(LD_I4_1, "ld.i4.1", 0, 1) \
ENUM_ITEM(LD_I4_2, "ld.i4.2", 0, 1) \
ENUM_ITEM(LD_I4_3, "ld.i4.3", 0, 1) \
ENUM_ITEM(LD_I4_4, "ld.i4.4", 0, 1) \
ENUM_ITEM(LD_I4_5, "ld.i4.5", 0, 1) \
ENUM_ITEM(LD_I4_6, "ld.i4.6", 0, 1) \
ENUM_ITEM(LD_I4_7, "ld.i4.7", 0, 1) \
ENUM_ITEM(LD_I4_8, "ld.i4.8", 0, 1) \
ENUM_ITEM(LD_I4, "ld.i4", 4, 1) \
/* load float const */ \
ENUM_ITEM(LD_F4_M1, "ld.f4.m1", 0, 1) \
ENUM_ITEM(LD_F4_0, "ld.f4.0", 0, 1) \
ENUM_ITEM(LD_F4_1, "ld.f4.1", 0, 1) \
ENUM_ITEM(LD_F4, "ld.f4", 4, 1) \
/* load from local */ \
ENUM_ITEM(LD_LOC_0, "ld.loc.0", 0, 1) \
ENUM_ITEM(LD_LOC_1, "ld.loc.1", 0, 1) \
ENUM_ITEM(LD_LOC_2, "ld.loc.2", 0, 1) \
ENUM_ITEM(LD_LOC_4, "ld.loc.3", 0, 1) \
ENUM_ITEM(LD_LOC, "ld.loc", 1, 1) \
/* load from array */ \
ENUM_ITEM(LD_ARR, "ld.arr", 1, 1) \
/* load field */ \
ENUM_ITEM(LD_FLD, "ld.fld", 1, 1) \
/* store local */ \
ENUM_ITEM(ST_LOC_0, "st.loc.0", 0, -1) \
ENUM_ITEM(ST_LOC_1, "st.loc.1", 0, -1) \
ENUM_ITEM(ST_LOC_2, "st.loc.2", 0, -1) \
ENUM_ITEM(ST_LOC_3, "st.loc.3", 0, -1) \
ENUM_ITEM(ST_LOC, "st.loc", 1, -1) \
/* store in array */ \
ENUM_ITEM(ST_ARR, "st.arr", 1, -1) \
/* load in field */ \
ENUM_ITEM(ST_FLD, "st.fld", 1, -1) \
ENUM_ITEM(POP, "pop", 0, -1) \
ENUM_ITEM(DUP, "dup", 0, 1) \
/* int binary arithmetic */ \
ENUM_ITEM(ADD_I, "add.i", 0, -1) \
ENUM_ITEM(SUB_I, "sub.i", 0, -1) \
ENUM_ITEM(MUL_I, "mul.i", 0, -1) \
ENUM_ITEM(DIV_I, "div.i", 0, -1) \
ENUM_ITEM(MOD_I, "mod.i", 0, -1) \
/* int unary arithmetic */ \
ENUM_ITEM(NEG_I, "neg.i", 0, 0) \
ENUM_ITEM(COMPL_I, "compl.i", 0, 0) \
ENUM_ITEM(INC_I, "inc.i", 0, 0) \
/* conversion */ \
ENUM_ITEM(I2C, "i2c", 0, 0) \
ENUM_ITEM(I2S, "i2s", 0, 0) \
ENUM_ITEM(I2F, "i2f", 0, 0) \
ENUM_ITEM(F2I, "f2i", 0, 0) \
/* int bitwise */ \
ENUM_ITEM(AND_I, "and.i", 0, -1) \
ENUM_ITEM(XOR_I, "xor.i", 0, -1) \
ENUM_ITEM(OR_I, "or.i", 0, -1) \
ENUM_ITEM(SHL_I, "shl.i", 0, -1) \
ENUM_ITEM(SHR_I, "shr.i", 0, -1) \
/* float arithmetic */ \
ENUM_ITEM(ADD_F, "add.f", 0, -1) \
ENUM_ITEM(SUB_F, "sub.f", 0, -1) \
ENUM_ITEM(MUL_F, "mul.f", 0, -1) \
ENUM_ITEM(DIV_F, "div.f", 0, -1) \
ENUM_ITEM(MOD_F, "mod.f", 0, -1) \
/* float unary arithmetic */ \
ENUM_ITEM(NEG_F, "neg.f", 0, 0) \
/* conditional jump with 0 */ \
ENUM_ITEM(JEQ_Z, "jeq.z", 4, -1) \
ENUM_ITEM(JNE_Z, "jne.z", 4, -1) \
ENUM_ITEM(JLT_Z, "jlt.z", 4, -1) \
ENUM_ITEM(JLE_Z, "jle.z", 4, -1) \
ENUM_ITEM(JGT_Z, "jgt.z", 4, -1) \
ENUM_ITEM(JGE_Z, "jge.z", 4, -1) \
/* unconditional jump */ \
ENUM_ITEM(JUMP, "jump", 4, -1) \
/* comparison with 2 ints */ \
ENUM_ITEM(JEQ, "jeq", 4, -2) \
ENUM_ITEM(JNE, "jne", 4, -2) \
ENUM_ITEM(JLT, "jlt", 4, -2) \
ENUM_ITEM(JLE, "jle", 4, -2) \
ENUM_ITEM(JGT, "jgt", 4, -2) \
ENUM_ITEM(JGE, "jge", 4, -2) \
/* comparison with 2 ints */ \
ENUM_ITEM(CEQ, "cmp.eq.i4", 4, -1) \
ENUM_ITEM(CNE, "cmp.ne.i4", 4, -1) \
ENUM_ITEM(CLT, "cmp.lt.i4", 4, -1) \
ENUM_ITEM(CLE, "cmp.le.i4", 4, -1) \
ENUM_ITEM(CGT, "cmp.gt.i4", 4, -1) \
ENUM_ITEM(CGE, "cmp.ge.i4", 4, -1) \
/* other */ \
ENUM_ITEM(HALT, "halt", 0, 0) \
